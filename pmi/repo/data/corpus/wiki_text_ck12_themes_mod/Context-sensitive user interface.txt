A context sensitive user interface is one which can automatically choose from a multiplicity of options based on the current or previous state(s) of the program operation.Context sensitivity is almost ubiquitous in current graphical user interfaces, usually in the form of context menus. Context sensitivity, when operating correctly, should be practically transparent to the user. For example: Clicking on a text document automatically opens the document in a word processing environment. The user does not have to specify what type of program opens the file under standard conditions. The same methodology applies to other file types e.g. : Video files (.mpg .mov .avi etc.) open in a video player without the user having to select a specific program. Photographic and other image files (.jpg .png etc.) will open in a photo viewer automatically. Program files and their shortcuts (i.e. .exe files) are automatically run by the operating system. The user-interface may also provide Context sensitive feedback, such as changing the appearance of the mouse pointer or cursor, changing the menu color, or with applicable auditory or tactile feedback. The primary reason for introducing context sensitivity is to simplify the user interface. Advantages include : Reduced number of commands required to be known to the user for a given level of productivity. Reduced number of clicks or keystrokes required to carry out a given operation. Allows consistent behaviour to be pre-programmed or altered by the user. Reduces the number of options to be on screen at one time (i.e. "clutter"). Context sensitive actions may be perceived as dumbing down of the user interface - leaving the operator at a loss as to what to do when the computer decides to perform an unwanted action. Additionally non-automatic procedures may be hidden or obscured by the context sensitive interface causing an increase in user workload for operations the designers did not foresee. A poor implementation can be more annoying than helpful - a classic example of this is Office assistant. At the simplest level each possible action is reduced to a single most likely action - The action performed is based on a single variable (such as file extension). In more complicated implementations multiple factors can be assessed such as the users previous actions, the size of the file, the programs in current use, metadata etc. The method is not only limited to the response to imperative button presses and mouse clicks - pop up menus can be pruned and/or altered, or a web search can prune results based on previous searches. At higher levels of implementation context sensitive actions require either larger amounts of meta-data, extensive case analysis based programming, or other artificial intelligence algorithms. Context sensitivity is important in video games - especially those controlled by a gamepad, joystick or computer mouse in which the number of buttons available is limited. It is primarily applied when the player is in a certain place and is used to interact with a person or object. For example, if the player is standing next to an NPC, an option may come up allowing the player to talk with him/her. Implementations range from the embryonic 'Quick Time Event' to context sensitive sword combat in which the attack used depends on the position and orientation of both the player and opponent, as well as the virtual surroundings. A similar range of use is found in the 'action button' which dependent on the in game position of the player's character may cause the avatar to pick something up, open a door, grab a rope, punch a monster or opponent, or smash an object. The response does not have to be player activated - an on-screen device may only be shown in certain circumstances, e.g. 'targeting' cross hairs in a flight combat game may indicate the player should fire. An alternative implementation is to monitor the input from the player (e.g. level of button pressing activity) and use that to control the pace of the game in an attempt to maximize enjoyment or to control the excitement or ambiance. The method has become increasingly important as more complex games are designed for machines with few buttons (keyboard-less consoles). Bennet Ring commented (in 2006) that "Context-sensitive is the new lens flare". Context sensitive help is a common implementation of context sensitivity, a single help button is actioned and the help page or menu will open a specific page or topic related 