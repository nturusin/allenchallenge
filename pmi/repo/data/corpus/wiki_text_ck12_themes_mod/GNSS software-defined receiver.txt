A software GNSS receiver is a GNSS receiver that has been designed and implemented following the philosophy of Software-defined radio. A GNSS receiver, in general, is an electronic device that receives and digitally processes the signals from a GNSS satellite constellation in order to provide position, velocity and time (of the receiver). GNSS receivers have been traditionally implemented in hardware: a hardware GNSS receiver is conceived as a dedicated chip that have been designed and built (from the very beginning) with the only purpose of being a GNSS receiver. In a software GNSS receiver, all digital processing is performed by a general purpose microprocessor. In this approach, a small amount of inexpensive hardware is still needed, known as the frontend, that digitizes the signal from the satellites. The microprocessor can then work on this raw digital stream to implement the GNSS functionality. When comparing hardware vs software GNSS receivers, a number of pros and cons can be found for each approach: Hardware GNSS receivers are in general more efficient from the point of view of both computational load and power consumption since they have been designed in a highly specialized way with the only purpose of implementing the GNSS processing. Software GNSS receivers allow a huge flexibility: many features of the receiver can be modified just through software. This provides the receiver with adaptive capabilities, depending on the user's needs and working conditions. In addition, the receiver can be easily upgraded via software. Under some assumptions, Software GNSS receivers can be more profitable for some applications, as long as sufficient computational power is available (and can be shared among multiple applications). For example, the microprocessor of a smartphone can be used to provide GNSS navigation with the only need of including a frontend (instead of a full, more expensive, hardware receiver). Currently, most of the GNSS receiver market is still hardware. However, there already exist operational solutions based on the software approach able to run on low-cost microprocessors. Software GNSS receivers are expected to increase their market share or even take over in the near future, following the development of the computational capabilities of the microprocessors (Moore's law). This comparison is strictly about GNSS SDR; please do not include general GNSS positioning and mapping software. Number of developers: 1? Under active development (as-of date): yes (2013-Sep-25) Creator/sponsor organization: Tokyo University of Marine Science and Technology, Japan Latest release (version and date): First release (version and date): Hardware support: Front-ends: NSL STEREO v2 and SiGe GN3S Sampler v3 Host computer special hardware supported: SIMD (SSE2 and AVX) Multicore supported? : GNSS/SBAS signals support: GPS: L1CA, L1C, L2C, L5 GLONASS: G1, G2 Galileo: E1, E5a, E5b BeiDou: B1 QZSS: LEX Features: Acquisition: yes Tracking: yes Generating pseudo-range: yes Decoding navigation data: yes Spectrum analysis: yes Position estimation: yes (through RTKLIB) Maximum number of real-time channels demonstrated: ? Signal records originating from other Sampler versions or other front-ends require configuration changes and in some cases also minor code changes. Host computer special hardware supported: no Multicore supported? Number of developers: 8 (along the project) Under active development (as-of date): yes (2013-Sep-25) Creator/sponsor organization: Centre Tecnolgic de Telecomunicacions de Catalunya Latest release (version and date): ongoing development (as Sept. 2013) First release (version and date): 2011-Mar-11 first svn commit Hardware support: Front-ends: UHD-compatible (USRP v1, v2, etc. ), RTL2832-based USB dongles and SiGe GN3S Sampler v2 Host computer special hardware supported: SIMD (via VOLK) Multicore supported? NSL STEREO v2 (650) gnss-sdr.ru open-hardware L1 band OneTalent GNSS SdrNavXX (250-800) iP-Solutions academic (Eagle), multi-system (FEM), multi-frequency (MFR) GNSS front ends (from $550) TeleOrbit GTEC RFFE developed by Fraunhofer IIS 