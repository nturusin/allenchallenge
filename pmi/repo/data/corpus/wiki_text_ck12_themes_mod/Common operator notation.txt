In programming languages, scientific calculators and similar common operator notation or operator grammar is a way to define and analyse mathematical and other formal expressions. In this model a linear sequence of tokens are divided into two classes: operators and operands. Operands are objects upon which the operators operate. These include literal numbers and other constants as well as identifiers (names) which may represent anything from simple scalar variables to complex aggregated structures and objects, depending on the complexity and capability of the language at hand as well as usage context. One special type of operand is the parenthesis group. An expression enclosed in parentheses is typically recursively evaluated to be treated as a single operand on the next evaluation level. Each operator is given a position, precedence, and an associativity. The operator precedence is a number (from high to low or vice versa) that defines which operator that takes an operand surrounded by two operators of different precedence (or priority). Multiplication normally has higher precedence than addition, for example, so 3+45 = 3+(45) (3+4)5. In terms of operator position, an operator may be prefix, postfix, or infix. A prefix operator immediately precedes its operand, as in x. A postfix operator immediately succeeds its operand, as in x! for instance. An infix operator is positioned in between a left and a right operand, as in x+y. Some languages, most notably the C-syntax family, stretches this conventional terminology and speaks also of ternary infix operators (a?b:c). Theoretically it would even be possible (but not necessarily practical) to define parenthesization as a unary bifix operation. Operator associativity, determines what happens when an operand is surrounded by operators of the same precedence, as in 1-2-3: An operator can be left-associative, right-associative, or non-associative. Left-associative operators are applied to operands in left-to-right order while right-associative operators are the other way round. The basic arithmetic operators are normally all left-associative, which means that 1-2-3 = (1-2)-3 1-(2-3), for instance. In programming languages where assignment is implemented as an operator, that operator is often right-associative. If so, a statement like a := b := c would be equivalent to a := (b := c), which means that the value of c is copied to b which is then copied to a. An operator which is non-associative cannot compete for operands with operators of equal precedence. In Prolog for example, the infix operator :- is non-associative, so constructs such as a :- b :- c are syntax errors. Unary prefix operators such as (negation) or sin (trigonometric function) are typically associative prefix operators. When more than one associative prefix or postfix operator of equal precedence precedes or succeeds an operand, the operators closest to the operand goes first. So sin x = (sin x), and sin -x = sin(-x). Mathematically oriented languages (such as on scientific calculators) often allow implicit multiplication with higher priority than prefix operators (such as sin). Therefore, sin 2x+1 = (sin(2x))+1, for instance, just as in mathematics. However, prefix (and postfix) operators do not necessarily have higher precedence than all infix operators. Some (hypothetical) programming language may well have an operator called sin with a precedence lower than but higher than + for instance. In such a language, sin 2x+1 = sin(2x)+1 would be true, instead of (sin 2)x+1, as in mathematics. The rules for expression evaluation are usually three-fold: Treat any sub-expression in parentheses as a single recursively-evaluated operand (there may be different kinds of parentheses though, with different semantics). Bind operands to operators of higher precedence before those of lower precedence. For equal precedence, bind operands to operators according to the associativity of the operators. Some more examples: 1-2+3/45+6+7 = (((1-2)+((3/4)5))+6)+7 4 + -x + 3 = (4 + (-x)) + 3 The use of operator precedence classes and associativities is just one way. However, it is not the most general way: this model cannot give an operator more precedence when competing with '' than it can when competing with '+', while still giving '+' and '' equivalent precedences and associativities. A generalized version of this model (in which each operator can be given independent left and right precedences) can be found at [1]. 