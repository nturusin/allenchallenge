Concurrent computing is a form of computing in which several computations are executing during overlapping time periodsconcurrentlyinstead of sequentially (one completing before the next starts). This is a property of a systemthis may be an individual program, a computer, or a networkand there is a separate execution point or "thread of control" for each computation ("process"). A concurrent system is one where a computation can make progress without waiting for all other computations to completewhere more than one computation can make progress at "the same time". As a programming paradigm, concurrent computing is a form of modular programming, namely factoring an overall computation into subcomputations that may be executed concurrently. Pioneers in the field of concurrent computing include Edsger Dijkstra, Per Brinch Hansen, and C.A.R. Hoare. Concurrent computing is related to but distinct from parallel computing, though these concepts are frequently confused, and both can be described as "multiple processes executing during the same period of time". In parallel computing, execution literally occurs at the same instant, for example on separate processors of a multi-processor machine, with the goal of speeding up computationsparallel computing is impossible on a (single-core) single processor, as only one computation can occur at any instant (during any single clock cycle). By contrast, concurrent computing consists of process lifetimes overlapping, but execution need not happen at the same instant. The goal here is to model processes in the outside world that happen concurrently, such as multiple clients accessing a server at the same time. Structuring software systems as composed of multiple concurrent, communicating parts can be useful for tackling complexity, regardless of whether the parts can be executed in parallel. For example, concurrent processes can be executed on a single core by interleaving the execution steps of each process via time slices: only one process runs at a time, and if it does not complete during its time slice, it is paused, another process begins or resumes, and then later the original process is resumed. In this way multiple processes are part-way through execution at a single instant, but only one process is being executed at that instant. Concurrent computations may be executed in parallel, for example by assigning each process to a separate processor or processor core, or distributing a computation across a network, but in general, the languages, tools and techniques for parallel programming may not be suitable for concurrent programming, and vice versa. The exact timing of when tasks in a concurrent system are executed depend on the scheduling, and tasks need not always be executed concurrently. For example, given two tasks, T1 and T2: T1 may be executed and finished before T2 or vice versa (serial and sequential); T1 and T2 may be executed alternately (serial and concurrent); T1 and T2 may be executed simultaneously at the same instant of time (parallel and concurrent). The word "sequential" is used as an antonym for both "concurrent" and "parallel"; when these are explicitly distinguished, concurrent/sequential and parallel/serial are used as opposing pairs. A schedule in which tasks execute one at a time (serially, no parallelism), without interleaving (sequentually, no concurrency: no task begins until the previous task ends) is called a serial schedule. A set of tasks that can be scheduled serially is serializable, which simplifies concurrency control. The main challenge in designing concurrent programs is concurrency control: ensuring the correct sequencing of the interactions or communications between different computational executions, and coordinating access to resources that are shared among executions. Potential problems include race conditions, deadlocks, and resource starvation. For example, consider the following algorithm for making withdrawals from a checking account represented by the shared resource balance: Suppose balance = 500, and two concurrent threads make the calls withdraw(300) and withdraw(350). If line 3 in both operations executes before line 5 both operations will find that balance >= withdrawal evaluates to true, and execution will proceed to subtracting the withdrawal amount. However, since both processes perform their withdrawals, the total amount withdrawn will end up being more than the original balance. These sorts of problems with shared resources require the use of concurrency control, or non-blocking algorithms. Because concurrent systems rely on the use of shared resources (including communication media), concurrent computing in general requires the use of some form of arbiter somewhere in the implementation to mediate access to these resources. Unfortunately, while many solutions exist to the problem of a conflict over one resource, many of those "solutions" have their own concurrency problems such as deadlock when more than one resource is involved. Increased application throughputparallel execution of a concurrent program allows the number of tasks completed in certain time period to increase. High responsiveness for input/outputinput/output-intensive applications mostly wait for input or output operations to complete. Concurrent programming allows the time that would be spent waiting to be used for another task. More appropriate program structuresome problems and problem domains are well-suited to representation as concurrent tasks or processes. There are several models of concurrent computing, which can be used to understand and analyze concurrent systems. These models include: Actor model Object-capability model for security Petri nets Process calculi such as Ambient calculus Calculus of Communicating Systems (CCS) Communicating Sequential Processes (CSP) -calculus Join-calculus Input/output automaton A number of different methods can be used to implement concurrent programs, such as implementing each computational execution as an operating system process, or implementing the computational processes as a set of threads within a single operating system process. In some concurrent computing systems, communication between the concurrent components is hidden from the programmer (e.g., by using futures), while in others it must be handled explicitly. Explicit communication can be divided into two classes: Shared memory communication Concurrent components communicate by altering the contents of shared memory locations (exemplified by Java and C#). This style of concurrent programming usually requires the application of some form of locking (e.g., mutexes, semaphores, or monitors) to coordinate between threads. A program that properly implements any of these is said to be thread-safe. Message passing communication Concurrent components communicate by exchanging messages (exemplified by Scala, Erlang and occam). The exchange of messages may be carried out asynchronously, or may use a synchronous "rendezvous" style in which the sender blocks until the message is received. Asynchronous message passing may be reliable or unreliable (sometimes referred to as "send and pray"). Message-passing concurrency tends to be far easier to reason about than shared-memory concurrency, and is typically considered a more robust form of concurrent programming. A wide variety of mathematical theories for understanding and analyzing message-passing systems are available, including the Actor model, and various process calculi. Message passing can be efficiently implemented on symmetric multiprocessors, with or without shared coherent memory. Shared memory and message passing concurrency have different performance characteristics. Typically (although not always), the per-process memory overhead and task switching overhead is lower in a message passing system, but the overhead of message passing itself is greater than for a procedure call. These differences are often overwhelmed by other performance factors. Concurrent computing developed out of earlier work on railroads and telegraphy, from the 19th and early 20th century, and some terms date to this period, such as semaphores. These arose to address the question of how to handle multiple trains on the same railroad system (avoiding collisions and maximizing efficiency) and how to handle multiple transmissions over a given set of wires (improving efficiency), such as via time-division multiplexing (1870s). The academic study of concurrent algorithms started in the 1960s, with Dijkstra (1965) credited with being the first paper in this field, identifying and solving mutual exclusion. Concurrency is pervasive in computing, occurring from low-level hardware on a single chip to world-wide networks. Examples follow. At the programming language level: Channel Coroutine Futures and promises At the operating system level: Computer multitasking, including both cooperative multitasking and preemptive multitasking Time-sharing, which replaced sequential batch processing of jobs with concurrent use of a system Process Thread At the network level, networked systems are generally concurrent by their nature, as they consist of separate devices. Concurrent programming languages are programming languages that use language constructs for concurrency. These constructs may involve multi-threading, support for distributed computing, message passing, shared resources (including shared memory) or futures and promises. Such languages are sometimes described as Concurrency Oriented Languages or Concurrency Oriented Programming Languages (COPL). Today, the most commonly used programming languages that have specific constructs for concurrency are Java and C#. Both of these languages fundamentally use a shared-memory concurrency model, with locking provided by monitors (although message-passing models can and have been implemented on top of the underlying shared-memory model). Of the languages that use a message-passing concurrency model, Erlang is probably the most widely used in industry at present. Many concurrent programming languages have been developed more as research languages (e.g. Pict) rather than as languages for production use. However, languages such as Erlang, Limbo, and occam have seen industrial use at various times in the last 20 years. Languages in which concurrency plays an important role include: Adageneral purpose, with native support for message passing and monitor based concurrency Alefconcurrent, with threads and message passing, for system programming in early versions of Plan 9 from Bell Labs Aliceextension to Standard ML, adds support for concurrency via futures Ateji PXextension to Java with parallel primitives inspired from -calculus Axumdomain specific, concurrent, based on Actor model and .NET Common Language Runtime using a C-like syntax C++std::thread C (C omega)for research, extends C#, uses asynchronous communication C#supports concurrent computing since version 5.0 using lock, yield, async and await keywords Clojuremodern Lisp for the JVM Concurrent Cleanfunctional programming, similar to Haskell Concurrent Collections (CnC)Achieves implicit parallelism independent of memory model by explicitly defining flow of data and control Concurrent Haskelllazy, pure functional language operating concurrent processes on shared memory Concurrent MLconcurrent extension of Standard ML Concurrent Pascalby Per Brinch Hansen Curry Dmulti-paradigm system programming language with explicit support for concurrent programming (Actor model) Euses promises to disallow deadlocks ECMAScriptpromises available in various libraries, proposed for inclusion in standard in ECMAScript 6 Eiffelthrough its SCOOP mechanism based on the concepts of Design by Contract Elixirdynamic and functional meta-programming aware language running on the Erlang VM. Erlanguses asynchronous message passing with nothing shared FAUSTreal-time functional, for signal processing, compiler provides automatic parallelization via OpenMP or a specific work-stealing scheduler Fortrancoarrays and do concurrent are part of Fortran 2008 standard Gofor system programming, with a concurrent programming model based on CSP Humefunctional, concurrent, for bounded space and time environments where automata processes are described by synchronous channels patterns and message passing Ioactor-based concurrency Janusfeatures distinct askers and tellers to logical variables, bag channels; is purely declarative JavaScriptvia web workers, in a browser environment, promises, and callbacks. JoCamlconcurrent and distributed channel based, extension of OCaml, implements the Join-calculus of processes Join Javaconcurrent, based on Java language Jouledataflow-based, communicates by message passing Joyceconcurrent, teaching, built on Concurrent Pascal with features from CSP by Per Brinch Hansen LabVIEWgraphical, dataflow, functions are nodes in a graph, data is wires between the nodes; includes object-oriented language Limborelative of Alef, for system programming in Inferno (operating system) MultiLispScheme variant extended to support parallelism Modula-2for system programming, by N. Wirth as a successor to Pascal with native support for coroutines Modula-3modern member of Algol family with extensive support for threads, mutexes, condition variables Newsqueakfor research , with channels as first-class values; predecessor of Alef Node.jsa server-side runtime environment for JavaScript occaminfluenced heavily by Communicating Sequential Processes (CSP) occam-a modern variant of occam, which incorporates ideas from Milner's -calculus Orcheavily concurrent, nondeterministic, based on Kleene algebra Ozmultiparadigm, supports shared-state and message-passing concurrency, and futures Mozart Programming Systemmultiplatform Oz ParaSailobject-oriented, parallel, free of pointers, race conditions Pictessentially an executable implementation of Milner's -calculus Perl with AnyEvent and Coro Python with Twisted, greenlet and gevent Reiauses asynchronous message passing between shared-nothing objects Red/Systemfor system programming, based on Rebol Rustfor system programming, focus on massive concurrency, using message-passing with move semantics, shared immutable memory, and shared mutable memory that is provably free of race conditions. SALSAactor-based with token-passing, join, and first-class continuations for distributed computing over the Internet Scalageneral purpose, designed to express common programming patterns in a concise, elegant, and type-safe way SequenceLgeneral purpose functional, main design objectives are ease of programming, code clarity-readability, and automatic parallelization for performance on multicore hardware, and provably free of race conditions SRfor research Stackless Python StratifiedJScombinator-based concurrency, based on JavaScript SuperPascalconcurrent, for teaching, built on Concurrent Pascal and Joyce by Per Brinch Hansen Uniconfor research Termite Schemeadds Erlang-like concurrency to Scheme TNSDLfor developing telecommunication exchanges, uses asynchronous message passing VHDL (VHSIC Hardware Description Language)IEEE STD-1076 XCconcurrency-extended subset of C language developed by XMOS, based on Communicating Sequential Processes, built-in constructs for programmable I/O Many other languages provide support for concurrency in the form of libraries, at levels roughly comparable with the above list. 