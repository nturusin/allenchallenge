IBM System/360 computers, and subsequent machines based on that architecture (mainframes), support a hexadecimal floating-point format. In comparison to IEEE 754 floating-point, the IBM floating-point format has a longer significand, and a shorter exponent. All IBM floating-point formats have 7 bits of exponent with a bias of 64. The normalized range of representable numbers is from 1665 to 1663 (approx. 5.39761 1079 to 7.237005 1075). The number is represented as the following formula: (1)sign 0.significand 16exponent64. A single-precision binary floating-point number is stored in a 32-bit word: Note that in this format the initial bit is not suppressed, and the radix point is set to the left of the mantissa in increments of 4 bits. Since the base is 16, the exponent in this form is about twice as large as the equivalent in IEEE 754, in order to have similar exponent range in binary, 9 exponent bits would be required. Consider encoding the value 118.625 as an IBM single-precision floating-point value. First note that the value is negative, so the sign bit is 1. The value 118.62510 in binary is 1110110.1012. This value is normalized by moving the radix point left four bits (one hexadecimal digit) at a time until the leftmost digit is zero, yielding 0.011101101012. The remaining rightmost digits are padded with zeros, yielding a 24-bit fraction of .0111 0110 1010 0000 0000 00002. The normalized value moved the radix point two digits to the left, yielding a multiplier and exponent of 16+2. A bias of +64 is added to the exponent (+2), yielding +66, which is 100 00102. Combining the sign, exponent plus bias, and normalized fraction produces this encoding: The number represented is +0.FFFFFF16 16127 64 = (1 166) 1663 +7.2370051 1075 The number represented is +0.116 160 64 = 161 1664 +5.397605 1079 Zero (0.0) is represented in normalized form as all zero bits, which is arithmetically the value +0.016 160 64 = +0 1664 +0.000000 1079 = 0. Given a significand of all-bits zero, any combination of positive or negative sign bit and a non-zero biased exponent will yield a value arithmetically equal to zero. However, the normalized form generated for zero by CPU hardware is all-bits zero. This is true for all three floating-point precision formats. Since the base is 16, there can be three leading zero bits in the binary significand. That means when the number is converted into binary, there can be as few as 21 bits of precision. Because of the "wobbling precision" effect, this can cause some calculations to be very inaccurate. A good example of the inaccuracy is representation of decimal value 0.1. It has no exact binary or hexadecimal representation. In hexadecimal format, it is represented as 0.19999999...16 or 0.0001 1001 1001 1001 1001 1001 1001...2, that is: This has only 21 bits, whereas the binary version has 24 bits of precision. Six hexadecimal digits of precision is roughly equivalent to six decimal digits (i.e. (6 1) log10(16) 6.02). A conversion of single precision hexadecimal float to decimal string would require at least 9 significant digits (i.e. 6 log10(16) + 1 8.22) in order to convert back to the same hexadecimal float value. Double-precision is the same except that the mantissa (fraction) field is wider and the double-precision number is stored in a double word (8 bytes): Note that the exponent range for this format is only about a quarter as large as the corresponding IEEE binary format. 14 hexadecimal digits of precision is roughly equivalent to 17 decimal digits. A conversion of double precision hexadecimal float to decimal string would require at least 18 significant digits in order to convert back to the same hexadecimal float value. Extended-precision (quadruple-precision) was added to the System/370 series and was available on some S/360 models (S/360-85, -195, and others by special request or simulated by OS software). The extended-precision mantissa (fraction) field is wider, and the extended-precision number is stored as two double words (16 bytes): 28 hexadecimal digits of precision is roughly equivalent to 32 decimal digits. A conversion of extended precision hexadecimal float to decimal string would require at least 35 significant digits in order to convert back to the same hexadecimal float value. Most arithmetic operations truncate like simple pocket calculators. Therefore, 1 167 = 1. In this case, the result is rounded away from zero. Starting with the S/390 G5 in 1998, IBM mainframes have also included IEEE binary floating-point units which conform to the IEEE 754 Standard for Floating-Point Arithmetic. IEEE decimal floating-point was added to IBM System z9 GA2 in 2007 using millicode and in 2008 to the IBM System z10 in hardware. Modern IBM mainframes support three floating-point radices with 3 hexadecimal (HFP) formats, 3 binary (BFP) formats, and 3 decimal (DFP) formats. There are two floating-point units per core; one supporting HFP and BFP, and one supporting DFP; note there is one register file, FPRs, which holds all 3 formats. The IBM floating-point format is used in: SAS 5 Transport files (.XPT) as required by the Food and Drug Administration (FDA) for New Drug Application (NDA) study submissions GRIB (GRIdded Binary) data files to exchange the output of weather prediction models (IEEE single-precision floating-point format in current version), GDS II (Graphic Database System II) format files (OASIS is the replacement), and SEG Y (Society of Exploration Geophysicists Y) format files (single-precision floating-point was added to the format in 2002). As IBM is the only remaining provider of hardware (and only in their mainframes) using their non-standard floating-point format, no popular file format requires it; Except the FDA requires the SAS file format and "All floating-point numbers in the file are stored using the IBM mainframe representation. [..] Most platforms use the IEEE representation for floating-point numbers. [..] To assist you in reading and/or writing transport files, we are providing routines to convert from IEEE representation (either big endian or little endian) to transport representation and back again." Code for IBM's format is also available under LGPLv2.1. IBM System/360 RCA Spectra 70 English Electric System 4 GEC 4000 series minicomputers Interdata 16-bit and 32-bit computers Texas Instruments 990/12 