AppleScript is a scripting language created by Apple Inc. and built into Macintosh operating systems since System 7. The term "AppleScript" may refer to the scripting system itself, or to an individual script written in the AppleScript language. AppleScript is primarily a scripting language developed by Apple to do Inter-Application Communication (IAC) using AppleEvents. AppleScript is related to, but different from, AppleEvents. AppleEvents is designed to exchange data between and control other applications in order to automate repetitive tasks. AppleScript has some limited processing abilities of its own, in addition to sending and receiving AppleEvents to applications. AppleScript can do basic calculation, and can do intricate text processing and it is extensible, allowing the addition of scripting additions which add new functions to the language itself. Mainly, however, AppleScript relies on the functionality of applications and processes to handle complex tasks. As a structured command language, AppleScript can be compared to Unix shells; the Microsoft Windows Script Host; or IBM REXX in its functionality, but it is unique from all three. Essential to its functionality is the fact that Macintosh applications publish "dictionaries" of addressable objects and operations. AppleScript has some elements of object-oriented programming, particularly in the construction of script objects, and natural language programming tendencies in its syntax, but does not strictly conform to either category. The AppleScript project was an outgrowth of the (now discontinued) HyperCard project. HyperCard contained an English language-based scripting language called HyperTalk, which could be used to program a HyperCard stack. Apple engineers recognized that a similar scripting language could be designed to be used with any application, and the AppleScript project was born as part of System 7. AppleScript was released in October 1993 as part of System 7.1.1 (System 7 Pro, the first major upgrade to System 7). QuarkXPress (ver. 3.2) was one of the first major software applications that supported AppleScript. This in turn led to AppleScript being widely adopted within the publishing and prepress world, often tying together complex workflows. This was a key factor in retaining the Macintosh's dominant position in publishing and prepress, even after QuarkXpress and other publishing applications were ported to Microsoft Windows. After some uncertainty about the future of AppleScript on Apple's next generation OS, the move to Mac OS X (around 2002) and its Cocoa frameworks greatly increased the usefulness and flexibility of AppleScript. Cocoa applications allow application developers to implement basic scriptability for their apps with minimal effort, broadening the number of applications that are directly scriptable. At the same time, the shift to the Unix underpinnings and AppleScript's ability to run Unix commands directly allowed AppleScripts much greater control over the operating system itself. AppleScript Studio, released with Mac OS X 10.2 as part of Xcode, and later AppleScriptObjC framework, released in Mac OS X 10.6, allows users to build native Cocoa applications using AppleScript. AppleScript is one component of Mac OS X Automation technologies, along with Services, Automator, and Shell scripting. AppleScript was designed to be used as an accessible end-user scripting language, offering users an intelligent mechanism to control applications, and to access and modify data and documents. AppleScript uses Apple Events: a set of standardized data formats that the Macintosh operating system uses to send information to applications. Apple Events allow a script to work with multiple applications simultaneously, passing data between them so that complex tasks can be accomplished without human interaction. For example, an AppleScript to create a simple web gallery might do the following: Open a photo in a photo-editing application (by sending that application an Open File Apple Event). Tell the photo-editing application to manipulate the image (e.g. reduce its resolution, add a border, add a photo credit) Tell the photo-editing application to save the changed image in a file in some different folder (by sending that application a Save and/or Close Apple Event). Send the new file path (via another Apple Event) to a text editor or web editor application Tell that editor application to write a link for the photo into an HTML file. Repeat the above steps for an entire folder of images (hundreds or even thousands of photos). Upload the HTML file and folder of revised photos to a website, by sending Apple Events to an FTP client, by using built-in AppleScript commands, or by sending Apple Events to Unix ftp utilities. For the user, hundreds or thousands of steps in multiple applications have been reduced to the single act of running the script, and the task is accomplished in much less time and with no possibility of random human error. A large complex script could be developed to run only once, while other scripts are used again and again. An application's AppleScript elements are visible in the application's Scripting Dictionary (distributed as part of the application), which can be viewed in any script editor. Elements are generally grouped into suites, according to loose functional relationships between them. There are two basic kinds of elements present in any suite: Classes and Commands. Classes are scriptable objects - for example, a text editing application will almost certainly have classes for Windows, Documents, and Texts - and these classes will have properties that can be changed (window size, document background color, text font size, etc. ), and may contain other classes (a window will contain one or more documents, a document will contain text, a text object will contain paragraphs and words and characters). Commands, by contrast, are commands that can be given to scriptable objects. The general format for a block of AppleScript is to tell a scriptable object to run a command. All scriptable applications share a few basic commands and objects (usually called the Standard Suite) - commands to open, close or save a file, to print something, to quit, to set data to variables - as well as a basic application object that gives the scriptable properties of the application itself. Many applications have numerous suites capable of performing any task the application itself can perform. In exceptional cases, applications may support plugins which include their own scripting dictionaries. AppleScript was designed with the ability to build scripts intuitively by recording user actions. When the AppleScript Editor is open and the Record button clicked, any user actions on the computer - in any application that supports AppleEvents and AppleScript recording - are converted to their equivalent AppleScript commands and placed in the script editor window. The resulting script can be saved and re-run to duplicate the original actions, or modified to be more generally useful. Comments can be made multiple ways. If you need to make a small one-line comment, you can use 2 hyphens (-), or a number sign (#). Example: If you need to have a rather long comment that takes up multiple lines, you would use parenthesis with asterisks inside. Example: In AppleScript, the traditional "Hello, world!" program could be written in many of different forms: AppleScript has several user interface options, including dialogs, alerts, and list of choices. (The character , produced by typing option-return in the Script Editor, denotes continuation of a single statement across multiple lines.) Each user interaction method can return the values of buttons clicked, items chosen or text entered for further processing. For example: Whereas AppleEvents are a way to send messages into applications, AppleScript is a particular language designed to send Apple Events. In keeping with the Mac OS tradition of ease-of-use, the AppleScript language is designed on the natural language metaphor, just as the graphical user interface is designed on the desktop metaphor. A well-written AppleScript should be clear enough to be read and understood by anyone, and easily edited. The language is based largely on HyperCard's HyperTalk language, extended to refer not only to the HyperCard world of cards and stacks, but also theoretically to any document. To this end, the AppleScript team introduced the AppleEvent Object Model (AEOM), which specifies the objects any particular application "knows". The heart of the AppleScript language is the use of terms that act as nouns and verbs that can be combined. For example, rather than a different verb to print a page, document or range of pages (printPage, printDocument, printRange), AppleScript uses a single "print" verb which can be combined with an object, such as a page, a document or a range of pages. Generally, AEOM defines a number of objectslike "document" or "paragraph"and corresponding actionslike "cut" and "close". The system also defines ways to refer to properties of objects, so one can refer to the "third paragraph of the document 'Good Day'", or the "color of the last word of the front window". AEOM uses an application dictionary to associate the Apple Events with human-readable terms, allowing the translation back and forth between human-readable AppleScript and bytecode Apple Events. To discover what elements of a program are scriptable, dictionaries for supported applications may be viewed. (In the Xcode and Script Editor applications, this is under File Open Dictionary.) To designate which application is meant to be the target of such a message, AppleScript uses a "tell" construct: Alternatively, the tell may be expressed in one line by using an infinitive: For events in the "Core Suite" (activate, open, reopen, close, print, and quit), the application may be supplied as the direct object to transitive commands: The concept of an object hierarchy can be expressed using nested blocks: The concept of an object hierarchy can also be expressed using nested prepositional phrases: which in another programming language might be expressed as sequential method calls, like in this pseudocode: AppleScript includes syntax for ordinal counting, "the first paragraph", as well as cardinal, "paragraph one". Likewise, the numbers themselves can be referred to as text or numerically, "five", "fifth" and "5" are all supported; they are synonyms in AppleScript. Also, the word "the" can legally be used anywhere in the script in order to enhance readability: it has no effect on the functionality of the script. A failsafe calculator: A simple username and password dialog box sequence. Here, the username is John and password is app123: Script editors provide a unified programing environment for AppleScripts, including tools for composing, validating, compiling, running, and debugging scripts. They also provide mechanisms for opening and viewing AppleScript dictionaries from scriptable applications, saving scripts in a number of formats (compiled script files, application packages, script bundles, and plain text files), and usually provide features such as syntax highlighting and prewritten code snippets. AppleScript Editor (called Script Editor in versions of Mac OS X prior to 10.6 Snow Leopard as well as in OS X Yosemite) The editor for AppleScript packaged with Mac OS X. Scripts are written in document editing windows where they can be compiled and run, and these windows contain various panes in which logged information, execution results, and other information is available for debugging purposes. Access to scripting dictionaries and prewritten code snippets is available through the application menus. AppleScript Editor in Yosemite includes the ability to write in both AppleScript and JavaScript. Xcode, from Apple A suite of tools for developing applications with features for editing AppleScripts or creating full-fledged applications written with AppleScript. Smile and SmileLab, available from (Satimage) A third-party freeware/commercial IDE for AppleScript, itself written entirely in AppleScript. Smile is free, and primarily designed for AppleScript development. SmileLab is commercial software with extensive additions for numerical analysis, graphing, machine automation and web production. Smile and SmileLab use an assortment of different windows - AppleScript windows for running and saving full scripts, AppleScript terminals for testing code line-by-line, unicode windows for working with text and XML. Users can create complex interfaces - called dialogs - for situations where the built-in dialogs in AppleScript are insufficient. Script Debugger, from Late Night Software A third-party commercial IDE for AppleScript. Script Debugger is a more advanced AppleScript environment that allows the script writer to debug AppleScripts via single stepping, breakpoints, stepping in and out of functions/subroutines, variable tracking, etc. Script Debugger also contains an advanced dictionary browser that allows the user to see the dictionary in action in real world situations. That is, rather than just a listing of what the dictionary covers, one can open a document in Pages, for example, and see how the dictionary's terms apply to that document, making it easier to determine which parts of the dictionary to use. Script Debugger is not designed to create scripts with a GUI, other than basic alerts and dialogs, but is focused more on the coding and debugging of scripts. FaceSpan, from Late Night Software A third-party commercial IDE for creating AppleScript applications with Graphic User Interfaces. Development of FaceSpan has been suspended. AppleScripts can be run from a script editor, but it is usually more convenient to run scripts directly, without opening a script editor application. There are a number of options for doing so: Script Menu This system-wide menu provides access to AppleScripts from the Mac OS X menu bar, visible no matter what application is running. Selecting a script in the script menu launches it. In 10.6.x, the script menu is activated from the preferences of the AppleScript Editor; in prior versions of Mac OS X, it was activated from the AppleScript Utility application. When first activated, the script menu displays a default library of fairly generic, functional AppleScripts, which can also be opened in Script Editor and used as examples for learning AppleScript. Scripts can be organized so that they only appear in the menu when particular applications are in the foreground. Many Apple applications, some third party applications, and some add-ons provide their own script menus. These may be activated in different ways, but all function in essentially the same manner. Hotkey Launchers Keyboard shortcuts can be assigned to AppleScripts in the script menu using the System Preferences "Keyboard & Mouse Settings". Various third-party utilities are available - QuicKeys, Spark, Quicksilver, Alfred, TextExpander - which can run AppleScripts on demand using key combinations. Folder Actions Using AppleScript folder actions, scripts can be launched when specific changes occur in folders (such as adding or removing files). Folder actions can be assigned by clicking on a folder and choosing Folder Actions Setup... from the contextual menu; the location of this command differs slightly in 10.6.x from earlier versions. This same action can be achieved with third-party utilities such as Hazel. Unix command line and launchd AppleScripts can be run from the Unix command line, or from launchd for scheduled tasks, by using the osascript command line tool. The osascript tool can run compiled scripts (.scpt files) and plain text files (.applescript files - these are compiled by the tool at runtime). Script applications can be run using the Unix open command. Automator Automator is a graphical, modular editing environment in which workflows are built up from actions. It is intended to duplicate many of the functions of AppleScript without the necessity for programming knowledge. Automator has an action specifically designed to contain and run AppleScripts, for tasks that are too complex for Automator's simplified framework. Scriptable core system applications These background-only applications, packaged with Mac OS X, are used to allow AppleScript to access features that would not normally be scriptable. As of 10.6.3 they include the scriptable applications for VoiceOver (scriptable auditory and braille screen reader package), System Events (control of non-scriptable applications and access to certain system functions and basic file operations), Printer Setup Utility (scriptable utility for handling print jobs), Image Events (core image manipulation), HelpViewer (scriptable utility for showing help displays), Database Events (minimal SQLite3 database interface), and AppleScript Utility (for scripting a few AppleScript related preferences), as well as a few utility applications used by the system. AppleScriptObjC Part of the Xcode package, a cocoa development environment, which is available on the Mac OS X install CD but not installed by default. AppleScriptObjC allows AppleScripts to call Cocoa commands directly. AppleScript Studio Part of the Xcode package in 10.4 and 10.5, now deprecated. A framework for attaching Cocoa interfaces to AppleScript applications. Scripting Additions (OSAX) Scripting additions are plug-ins for AppleScript developed by Apple or third parties. They are designed to extend the built-in command set, expanding AppleScript's features and making it somewhat less dependent on functionality provided by applications. For instance, Apple's Standard Addition.osax scripting addition adds a set of commands and classes that that are not part of AppleScript's core features - without this osax, AppleScript would have no capacity to display dialogs, use navigation services, or perform any action not directly provided by an application. AppleScript has a number of built-in classes (or data types), though of course an application can and most likely will define extra data types for its own purposes. The basic data classes that should be universally recognized are as follows: File system alias - a reference to a file system object (file or folder). The alias will maintain its link to the object if the object is moved or renamed. file - a reference to a file system object (file or folder). This is a static reference, and can point to an object that does not currently exist. POSIX file - a reference to a file system object (file or folder) in plain text, using Unix style notation. Basic objects application - an application object, used mostly as a specifier for tell statements (tell application "Finder" ...) script - a script object. Script objects are containers for scripts. Every AppleScript creates a script object when run, and script objects may be created within AppleScripts. class - a meta-object that specifies the type of other objects reference - a persistent, indirect pointer to a different object. 'Reference to X' will always return X's current value Standard data objects boolean - true/false value constant - a developer-only class that specifies a constant. AppleScript contains a number of predefined constants - pi, tab, return - but this allows for applications to define their own constants. number - rarely used overarching class for integer and real. it is implicitly invoked when you set a variable to a value without checking whether the value is integer or real. integer real date - a date in AppleScript format. This class allows for a number of date and time manipulations. text - text. In versions of AppleScript before 2.0 (Mac OS X 10.5) the 'text' class was distinct from 'string' and 'Unicode text' and the three behaved somewhat differently; in 10.5 and later, they are all synonyms and all text is handled as Unicode. Container objects list - ordered list of objects. it can contain any class, including those defined by applications and other lists. record - keyed list of objects. like lists, except structured as key value pairs. Miscellaneous RGB color - specifies an RGB triplet, for use in commands and objects that work with colors. unit types - class that converts between standard units. For instance, a value can be defined as square yards, and then reported back as square feet merely by changing the unit type. Many AppleScript processes are managed by blocks of code, where a block begins with a command command and ends with an end command statement. The most important structures are described below. Conditionals AppleScript offers two kinds of conditionals. Loops The repeat loop of AppleScript comes in several slightly different flavors. They all execute the block between repeat and end repeat lines a number of times. The looping can be prematurely stopped with command exit repeat. Repeat forever. Repeat a given number of times. Conditional loops. The block inside repeat while loop executes as long as the condition evaluates to true. The condition is re-evaluated after each execution of the block. The repeat until loop is otherwise identical, but the block is executed as long as the condition evaluates to false. Loop with a variable. When starting the loop, the variable is assigned to the start value. After each execution of the block, the optional step value is added to the variable. Step value defaults to 1. Enumerate a list. On each iteration set the loopVariable to a new item in the given list One important variation on this block structure is in the form of on - end ... blocks that are used to define handlers (function-like subroutines). Handlers begin with on functionName() and ending with end functionName, and are not executed as part of the normal script flow unless called from somewhere in the script. Handlers can also be defined using "to" in place of "on" and can be written to accept labeled parameters, not enclosed in parens. There are four types of predefined handlers in AppleScript - run, open, idle, and quit - each of which is created in the same way as the run handler shown above. Run handler Defines the main code of the script, which is called when the script is run. Run handler blocks are optional, unless arguments are being passed to the script. If an explicit run handler block is omitted, then all code that is not contained inside handler blocks is executed as though it were in an implicit run handler. Open handler Defined using "on open theItems". When a script containing an "open handler' is saved as an applet, the applet becomes a droplet. A droplet can be identified in the Finder by its icon, which includes an arrow, indicating items can be dropped onto the icon. The droplet's open handler is executed when files or folders are dropped onto droplet's icon. References to the items dropped on the droplet's icon are passed to the droplet's script as the parameter of the open handler. A droplet can also be launched the same way as an ordinary applet, executing its run handler. Idle handler A subroutine that is run periodically by the system when the application is idle. An idle handler can be used in applets or droplets saved as stay-open applets, and is useful for scripts that watch for particular data or events. The length of the idle time is 30 seconds by default, but can be changed by including a 'return x' statement at the end of the subroutine, where x is he number of seconds the system should wait before running the handler again. Quit handler A handler that is run when the applet receives a Quit request. This can be used to save data or do other ending tasks before quitting. Script objects Script objects may be defined explicitly using the syntax: Script objects can use the same 'tell' structures that are used for application objects, and can be loaded from and saved to files. Runtime execution time can be reduced in some cases by using script objects. Variables are not strictly typed, and do not need to be declared. Variables can take any data type (including scripts and functions). The following commands are examples of the creation of variables: Script objects are full objects - they can encapsulate methods and data and inherit data and behavior from a parent script. Subroutines cannot be called directly from application tell blocks. Use the 'my' or 'of me' keywords to do so. Using the same technique for scripting addition commands can reduce errors and improve performance. An important aspect of the AppleScript implementation is the Open Scripting Architecture (OSA). Apple provides OSA for third-party scripting/automation products such as QuicKeys and UserLand Frontier, to function on an equal status with AppleScript. AppleScript was implemented as a scripting component, and the basic specs for interfacing such components to the OSA were public, allowing other developers to add their own scripting components to the system. Public client APIs for loading, saving and compiling scripts would work the same for all such components, which also meant that applets and droplets could hold scripts in any of those scripting languages. Under Mac OS X, the JavaScript OSA component remains the only serious OSA language alternative to AppleScript, though the Macintosh versions of Perl, Python, Ruby, and Tcl all support native means of working with AppleEvents without being OSA components. The MacRuby development roadmap shows that OSA conformance is planned in version 0.6. One of the most interesting features of the OSA is "scripting additions", or OSAX for Open Scripting Architecture eXtension, which were based on HyperCard's External Commands. Scripting Additions are libraries that allow programmers to extend the function of AppleScript. Commands included as Scripting Additions are available system wide, and are not dependent on an application. Mac OS X includes a collection of scripting additions referred to as Standard Additions, which extends the function of AppleScript with a variety of new commands, including user interaction dialogs, reading and writing files, file system commands, date functions, text and math operations. 