In computing, half precision is a binary floating-point computer number format that occupies 16 bits (two bytes in modern computers) in computer memory. In IEEE 754-2008 the 16-bit base 2 format is officially referred to as binary16. It is intended for storage (of many floating-point values where higher precision need not be stored), not for performing arithmetic computations. Half-precision floating point is a relatively new binary floating-point format. Nvidia defined the half datatype in the Cg language, released in early 2002, and was the first to implement 16-bit floating point in silicon, with the GeForce FX, released in late 2002. ILM was searching for an image format that could handle dynamic ranges, but without the hard drive and memory cost of floating-point representations that are commonly used for floating-point computation (single and double precision). The hardware-accelerated programmable shading group led by John Airey at SGI (Silicon Graphics) invented the s10e5 data type in 1997 as part of the 'bali' design effort. This is described in a SIGGRAPH 2000 paper (see section 4.3) and further documented in US patent 7518615. This format is used in several computer graphics environments including OpenEXR, JPEG XR, OpenGL, Cg, and D3DX. The advantage over 8-bit or 16-bit binary integers is that the increased dynamic range allows for more detail to be preserved in highlights and shadows for images. The advantage over 32-bit single-precision binary formats is that it requires half the storage and bandwidth (at the expense of precision and range). The IEEE 754 standard specifies a binary16 as having the following format: Sign bit: 1 bit Exponent width: 5 bits Significand precision: 11 bits (10 explicitly stored) The format is laid out as follows: The format is assumed to have an implicit lead bit with value 1 unless the exponent field is stored with all zeros. Thus only 10 bits of the significand appear in the memory format but the total precision is 11 bits. In IEEE 754 parlance, there are 10 bits of significand, but there are 11 bits of significand precision (log10(211) 3.311 decimal digits). The half-precision binary floating-point exponent is encoded using an offset-binary representation, with the zero offset being 15; also known as exponent bias in the IEEE 754 standard. Emin = 000012 011112 = 14 Emax = 111102 011112 = 15 Exponent bias = 011112 = 15 Thus, as defined by the offset binary representation, in order to get the true exponent the offset of 15 has to be subtracted from the stored exponent. The stored exponents 000002 and 111112 are interpreted specially. The minimum strictly positive (subnormal) value is 224 5.96 108. The minimum positive normal value is 214 6.10 105. The maximum representable value is (2210) 215 = 65504. These examples are given in bit representation of the floating-point value. This includes the sign bit, (biased) exponent, and significand. 0 01111 0000000000 = 1 0 01111 0000000001 = 1 + 210 = 1.0009765625 (next smallest float after 1) 1 10000 0000000000 = 2 0 11110 1111111111 = 65504 (max half precision) 0 00001 0000000000 = 214 6.10352 105 (minimum positive normal) 0 00000 1111111111 = 214 - 224 6.09756 105 (maximum subnormal) 0 00000 0000000001 = 224 5.96046 108 (minimum positive subnormal) 0 00000 0000000000 = 0 1 00000 0000000000 = 0 0 11111 0000000000 = infinity 1 11111 0000000000 = infinity 0 01101 0101010101 = 0.333251953125 1/3 By default, 1/3 rounds down like for double precision, because of the odd number of bits in the significand. So the bits beyond the rounding point are 0101... which is less than 1/2 of a unit in the last place. Decimals between 224 (minimum positive subnormal) and 214 (maximum subnormal) fixed interval 224 Decimals between 214 (minimum positive normal) and 213: fixed interval 224 Decimals between 213 and 212: fixed interval 223 Decimals between 212 and 211: fixed interval 222 Decimals between 211 and 210: fixed interval 221 Decimals between 210 and 29: fixed interval 220 Decimals between 29 and 28: fixed interval 219 Decimals between 28 and 27: fixed interval 218 Decimals between 27 and 26: fixed interval 217 Decimals between 26 and 25: fixed interval 216 Decimals between 25 and 24: fixed interval 215 Decimals between 24 and 23: fixed interval 214 Decimals between 23 and 22: fixed interval 213 Decimals between 22 and 21: fixed interval 212 Decimals between 21 and 1: fixed interval 211 Decimals between 1 and 2: fixed interval 210 (1+210 is the next smallest float after 1) Integers between 0 and 2048 can be exactly represented Integers between 2049 and 4096 round to a multiple of 2 (even number) Integers between 4097 and 8192 round to a multiple of 4 Integers between 8193 and 16384 round to a multiple of 8 Integers between 16385 and 32768 round to a multiple of 16 Integers between 32769 and 65519 round to a multiple of 32 Integers equal to or above 65520 are rounded to "infinity". ARM processors support (via a floating point control register bit) an "alternative half-precision" format, which does away with the special case for an exponent value of 31. It is almost identical to the IEEE format, but there is no encoding for infinity or NaNs; instead, an exponent of 31 encodes normalized numbers in the range 65536 to 131008. 