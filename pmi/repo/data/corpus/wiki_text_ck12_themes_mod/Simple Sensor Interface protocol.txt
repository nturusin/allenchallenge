The SSI ("Simple Sensor Interface") protocol is a simple communications protocol designed for data transfer between computers or user terminals and smart sensors. The SSI protocol is an Application layer protocol as in the OSI model. The SSI protocol has been developed jointly by Nokia, Vaisala, Suunto, Ionific, Mermit and University of Oulu. Currently SSI is being developed within the Mimosa project, part of the European Union Framework Programmes for Research and Technological Development. The SSI protocol is used in point-to-point communications over UART and networking nanoIP applications. SSI also provides polling sensors and streaming sensor data. For RFID sensor tags SSI specifies memory map for sensor data. The criteria for SSI protocol development are: general purpose simple minimal overhead small footprint on the server (sensor) side Sample implementation of the SSI protocol for MSP430 microcontrollers will be published as open source during August 2006 by Nokia. An SSI message consists of a 2-byte header and an n-byte payload. The header consists of a one byte address (wildcard is '? ', 0x3F in ASCII) and a one byte message/command type. The different possible values for the message/command type are presented in SSI v1.2 command base. The group of commands: Q query A query reply C sensor discovery N discovery reply Z reset G get sensor configuration S set sensor configuration are used to find and configure sensor units utilizing the SSI-protocol. The group of commands: R request sensor data V data response D data response with status field are used to read sensor data infrequently. For data streaming purposes defined commands are: O create sensor observer Y observer created K delete observer U observer finished L request sensor listener J sensor listener created. V data response M data response with many data points Point-to-point messaging with SSI can be done with SSI/UART. An SSI UART message consists of a 3-byte UART header, an SSI message as the payload and an optional Cyclic redundancy check checksum. The use of a checksum is defined by the SSI message/command type, with lower case commands indicating the use of CRC. The header consists of a start byte (0xFE), a 2-byte (total) length of the message and a 2-byte bitwise Negation length to help identify the frame start. SSI networking in a variable environment is done using nanoIP. In a typical case using SSI, an individual message is not important, and so nanoUDP (simplified UDP defined by nanoIP) is used as the message format. If individual messages are important, nanoTCP can be used, as it provides flow control and retransmission at a cost of message size and increase in network traffic. A nanoUDP message consists of a 5-byte nanoUDP header, an n-byte message payload and an optional 2-byte CRC checksum. The header consists of one protocol byte, a 2-byte message length (total length, including header and CRC), a 1-byte source port and a 1-byte destination port number. The destination port number should be 0x28 for SSI messages. 0.1 March 14, 2003 0.2 April 29, 2003 0.3 May 20, 2003 0.4 October 2, 2003 0.5 December 5, 2003, not compatible with previous 0.6 November 3, 2004 0.7 December 22, 2004 0.8 January 14, 2005 1.0 April 11, 2005 1.1 October 27, 2005 1.2 May 27, 2006, not compatible with previous 